{"name":"addonpy","tagline":"a addon/plug-in framework for python","body":"# Description\r\n\r\n\"addonpy\" is a python module to provide addon / plug-in like functionality. This is simple addon interface provider.\r\n\r\n# Assumptions / Guidelines \r\n\r\n1. It will scan directory(ies) to look for file <AddonName>Addon.py or <AddonName>Addon.info \r\n   1. You can specify multiple locations in addon-loader.info file [_each project can have its own loader.info file_]\r\n   2. You can explicitly set addon folders before scanning for addons.\r\n2. Directories to search can be configured in code, or specified in \"info\" file and package it with your application.\r\n3. Every \"addon\" must have some common functions which will be called. \r\n   1. _by default, expected functions are 'start', 'execute', 'stop', '\\__info__' & '\\__addon__'. \r\n   2. Function names can be configured using \"[info](https://github.com/ninadmhatre/addonpy/blob/master/2014.06.20-01/example/addon-loader.info)\" file. \r\n4. Every file must have '\\__info__' function which returns 'meta' information about the addon.\r\n   1. Even if .info file is used to get this information, please duplicate it to support both modes.\r\n5. \"addonpy\" can be started in \"verbose\" mode to log the information, and if you are using your own logger make sure you wrap it up with \"[dummy logger class](https://github.com/ninadmhatre/addonpy/blob/master/2014.06.20-01/example/consumer.py#L21)\"\r\n\r\nDescription\r\n------------\r\n> Note: I have not checked it with Threading! Threading should be handled within addon.\r\n\r\nThis is simple addon / plugin framework in python for python files. This is pure python module. \r\nMain purpose of 'addonpy' is to give developer simple addon /plugin interface\r\n- project specific config file to define addon location and functions to validate in each addon\r\n- comes with own run_manager, which can execute functions within addon in given order\r\n  - either configure with run_manger instance \r\n  - or specify when executing particular addon\r\n  - or ask it to pick up from addon`s meta data\r\n- obviously, you can run individual functions as you want without run_manger\r\n  ** Note: make sure you run within try..except..finally block **\r\n  \r\nWorks On\r\n---------\r\nI have tested it on below OS`es & Python versions\r\n\r\n**Windows 7** : 2.7.5+, 3.4.1\r\n\r\n**Linux RH5** : 2.6.6, 2.7.5+, 3.4.1\r\n\r\nAddon Guidelines\r\n-----------------\r\n\r\n**Naming:**\r\n  - Use CamelCase\r\n  - Every addon should have 'Addon' in name like SomethingAddon.py/info \r\n\r\n**Organizing & Writing:**\r\n  - Python file name and class name should be same!\r\n      e.g. LoadConfigAddon.py will have 'class LoadConfigAddon(IAddonInfo)'\r\n  - Only one addon per file.\r\n  - addon class should always inherit from 'IAddonInfo'\r\n  - Do not use 'sys.exit()'\r\n  - Always have 'start', 'execute', 'stop', '\\__addon__' & '\\__info__' functions\r\n  - You can specify your own function names with config file in your project\r\n   > NOTE: Always have '\\__info__' & '\\__addon__' to get meta information\r\n  \r\n**Meta:**\r\n  - No extra file for every module, all file meta is included in addon\r\n  - Optionally, you can create .info file for every addon with all the meta\r\n  - use \\__info__ function to define addon meta ( simple dictionary )\r\n    \r\n        meta = {\r\n            \"uuid\": \"5b2dd0d5-2bbd-40a9-8250-c21167dbb822\", # Not used\r\n            \"name\": \"FileIOAddon\", # Addon name \r\n            \"type\": \"0\", # Type of addon for __future__\r\n            \"description\": \"File IO related operations will be done with this addon\",\r\n            \"execution_seq\": [\"start\", \"execute\"],\r\n            \"os\": [\"linux\", \"win32\"],\r\n            \"stop_seq\": [\"stop\"],\r\n            \"version\": \"1.0.5\",\r\n            \"author\": \"Ninad Mhatre\",\r\n            \"help_url\": \"http://www.google.com/easydep/addon/FileIOAddon.html\"\r\n        }\r\n> Note: Copy above \"meta\" in <AddonName>.info file and keep it along with <AddonName>.py.\r\n>       Just make sure .info file is valid JSON file, so you have to remove \"meta =\" while copying.\r\n\r\n## More Information\r\n\r\nPlease check [wiki](https://github.com/ninadmhatre/addonpy/wiki) for complete information.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}